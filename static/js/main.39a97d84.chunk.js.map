{"version":3,"sources":["firebase.js","Components/WeatherIcon.js","API/openWeather.js","Components/SearchBar.js","Components/Units.js","Components/Header.js","Components/Temperature.js","Components/TimeString.js","Components/Location.js","Components/CurrentWeather.js","Components/DateString.js","Components/WeekForecast.js","Components/HourString.js","Components/HourlyForecast.js","Components/LocationList.js","Components/Footer.js","Components/MapComponent.js","App.js","API/locationIq.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Icon","props","type","description","className","src","alt","SearchBar","action","htmlFor","id","onChange","change","placeholder","onClick","submit","aria-label","title","icon","faSearchLocation","getLocation","faMapMarkerAlt","Units","updateUnits","units","console","log","value","Header","href","Temperature","temp","toFixed","TimeString","time","hours","getHours","mins","getMinutes","minString","toString","padStart","string","Location","city","province","country","CurrentWeather","weather","Date","current","dt","toDateString","class","humidity","sunrise","sunset","feels_like","DateString","lastIndex","lastIndexOf","substring","WeekForecast","daily","map","day","index","max","min","HourString","HourlyForecast","hourly","page","scroll","faChevronLeft","hour","faChevronRight","LocationList","locations","onSelect","onRemove","state","selectedLocation","loc","data","length","key","faTrashAlt","Footer","rel","Component","MapComponent","lat","lon","mapType","position","e","target","name","checked","Map","center","zoom","TileLayer","attribution","url","App","preventDefault","navigator","geolocation","getCurrentPosition","setState","coords","latitude","longitude","getCity","getWeather","searchLocation","location","axios","method","endpoint","dataResponse","params","format","q","then","result","updateLocationState","selectLocation","locationLoading","removeLocation","dbRef","database","ref","child","uid","remove","updateMapType","hourlyScroll","hourlyPage","isLoading","weatherLoading","firebaseLoading","locationList","this","on","response","newState","val","user","users","push","auth","signInAnonymously","catch","error","code","message","onAuthStateChanged","isAnonymous","address","updateList","canPush","list","appid","openWeather","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.39a97d84.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/database\";\r\nimport \"firebase/auth\";\r\n\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDGLQ0nTfj4mfoTHmafn5bUwAJLfz7bf_k\",\r\n  authDomain: \"weather-app-db102.firebaseapp.com\",\r\n  databaseURL: \"https://weather-app-db102.firebaseio.com\",\r\n  projectId: \"weather-app-db102\",\r\n  storageBucket: \"weather-app-db102.appspot.com\",\r\n  messagingSenderId: \"43100392282\",\r\n  appId: \"1:43100392282:web:a7de5bc1a8d3446cb18163\",\r\n};\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;","import React from 'react'\r\n\r\nimport { weatherIconEndpoint } from '../API/openWeather'\r\n\r\nimport '../styles/WeatherIcon.css'\r\n\r\nexport default function Icon(props) {\r\n\t\r\n\tconst { type, description } = props;\r\n\t\r\n\treturn (\r\n\t\t<img className=\"weather-icon\" src={`${weatherIconEndpoint}${type}@2x.png`} alt={description}/>\r\n\t)\r\n}\r\n","// OpenWeather API - openweathermap.org\r\n\r\nimport axios from 'axios'\r\n\r\nconst endpoint = 'https://api.openweathermap.org/data/2.5/onecall';\r\nconst key = '4de58afe7c0aa78a01498b122c46d7e2';\r\n\r\nexport const weatherIconEndpoint = 'http://openweathermap.org/img/wn/';\r\n\r\n\r\nexport default function openWeather(latitude, longitude, units) {\r\n\treturn axios({\r\n\t\tmethod: \"GET\",\r\n\t\turl: endpoint,\r\n\t\tdataResponse: \"json\",\r\n\t\tparams: {\r\n\t\t\tappid: key,\r\n\t\t\tunits: units,\r\n\t\t\tlat: latitude,\r\n\t\t\tlon: longitude,\r\n\t\t}\r\n\t})\r\n}","import React from 'react'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSearchLocation, faMapMarkerAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport '../styles/SearchBar.css'\r\n\r\n/**\r\n * The search bar for looking up new locations\r\n * @param {object} props \r\n */\r\nexport default function SearchBar(props) {\r\n\r\n\treturn (\r\n    <form action=\"submit\" className=\"searchBar\">\r\n      <label className=\"sr-only\" htmlFor={props.id}>Search Location</label>\r\n      <input\r\n        onChange={props.change}\r\n        type=\"text\"\r\n        id={props.id}\r\n        placeholder={props.placeholder}\r\n      />\r\n\r\n      <button\r\n        onClick={props.submit}\r\n        type=\"submit\"\r\n        aria-label=\"Search Location\"\r\n        title=\"Search Location\"\r\n      >\r\n        <FontAwesomeIcon icon={faSearchLocation} />\r\n      </button>\r\n\r\n      <button\r\n        onClick={props.getLocation}\r\n        aria-label=\"Use Current Location\"\r\n        title=\"Use Current Location\"\r\n      >\r\n        <FontAwesomeIcon icon={faMapMarkerAlt} />\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\n","import React, { Component } from 'react'\r\n\r\nimport '../styles/Units.css'\r\n\r\n/**\r\n * Select which units of measurement to use\r\n */\r\nexport default function Units(props) {\r\n\t\r\n\tconst { updateUnits, units } = props;\r\n\r\n\tconsole.log('units', units);\r\n\r\n\t\treturn (\r\n      <div className=\"Units\">\r\n        <button\r\n          className={units === \"metric\" ? \"selected\" : \"\"}\r\n          value=\"metric\"\r\n          onClick={updateUnits}\r\n        >\r\n          metric\r\n        </button>\r\n        <span>/</span>\r\n        <button\r\n          className={units === \"imperial\" ? \"selected\" : \"\"}\r\n          value=\"imperial\"\r\n          onClick={updateUnits}\r\n        >\r\n          imperial\r\n        </button>\r\n        <span>/</span>\r\n        <button\r\n          className={units === \"kelvin\" ? \"selected\" : \"\"}\r\n          value=\"kelvin\"\r\n          onClick={updateUnits}\r\n        >\r\n          kelvin\r\n        </button>\r\n      </div>\r\n    );\r\n}\r\n","import React from 'react'\r\n\r\nimport SearchBar from './SearchBar'\r\nimport Units from './Units'\r\nimport WeatherIcon from './WeatherIcon'\r\n\r\nimport '../styles/Header.css'\r\n\r\n\r\nexport default function Header(props) {\r\n\t\r\n\tconst { getLocation, submit, change, updateUnits, units } = props;\r\n\t\t\r\n\tconsole.log('units', units);\r\n\r\n\treturn (\r\n    <header>\r\n      <div className=\"wrapper\">\r\n        <div className=\"header-container\">\r\n          <h1>\r\n            <a href=\"#\">\r\n              <WeatherIcon type=\"02d\" description=\"TheWeather Logo\" />\r\n              <span>The</span>Weather\r\n            </a>\r\n          </h1>\r\n\r\n          <div className=\"header-right\">\r\n            <Units updateUnits={updateUnits} units={units} />\r\n\r\n            <SearchBar\r\n              getLocation={getLocation}\r\n              submit={submit}\r\n              change={change}\r\n              id=\"search-location\"\r\n              placeholder=\"Enter Location\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\n/**\r\n * Display temperature with provided unit\r\n */\r\nexport default function Temperature(props) {\r\n\r\n\tconst { temp, units } = props;\r\n\r\n\treturn (\r\n    <span>\r\n      {temp.toFixed(1)}\r\n      {!units ? '' : units === \"metric\" ? \"°C\" : units === \"imperial\" ? \"°F\" : \"K\"}\r\n    </span>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function TimeString(props) {\r\n  const { time } = props;\r\n\r\n\tconst hours = time.getHours();\r\n\tconst mins = time.getMinutes();\r\n\r\n\tconst minString = mins.toString().padStart(2, \"0\");\r\n\r\n\tconsole.log('mins', mins);\r\n\t\r\n\t\r\n\tlet string =\r\n    hours % 12\r\n      ? `${(hours % 12).toString()}:${minString}`\r\n      : `12:${minString}`;\r\n\r\n\tconsole.log(string);\r\n\r\n  if (hours / 12 >= 1) {\r\n    string += \"pm\";\r\n  } else {\r\n    string += \"am\";\r\n  }\r\n\r\n  return <span>{string}</span>;\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Location(props) {\r\n\t\r\n\tconst { city, province, country } = props;\r\n\t\r\n\treturn (\r\n    <span>\r\n      {`${city ? `${city}, ` : \"\"}${province ? `${province}, ` : \"\"}${country}`}\r\n    </span>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nimport WeatherIcon from './WeatherIcon';\r\nimport Temperature from './Temperature';\r\nimport TimeString from './TimeString'\r\nimport Location from './Location'\r\n\r\nimport '../styles/CurrentWeather.css';\r\n\r\n/**\r\n * The current weather\r\n */\r\nexport default function CurrentWeather(props) {\r\n\r\n\tconst {city, province, country, weather, units } = props;\r\n\r\n\tconst time = new Date(weather.current.dt * 1000);\r\n\r\n\r\n\treturn (\r\n    <div className=\"currentWeather-container\">\r\n      <h2>\r\n        <Location city={city} province={province} country={country} />\r\n      </h2>\r\n      <p>{time.toDateString()}</p>\r\n\r\n      <div className=\"currentWeather\">\r\n        <div class=\"currentWeather-left\">\r\n          <p>Humidity: {weather.current.humidity}%</p>\r\n          <p>\r\n            Sunrise:{\" \"}\r\n            <TimeString time={new Date(weather.current.sunrise * 1000)} />\r\n          </p>\r\n          <p>\r\n            Sunset:{\" \"}\r\n            <TimeString time={new Date(weather.current.sunset * 1000)} />\r\n          </p>\r\n        </div>\r\n\r\n        <div className=\"currentWeather-middle\">\r\n          <p className=\"description\">\r\n            {weather.current.weather[0].description}\r\n          </p>\r\n\r\n          <WeatherIcon\r\n            type={weather.current.weather[0].icon}\r\n            description={weather.current.weather[0].description}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"currentWeather-right\">\r\n          <p className=\"currentWeather-temp\">\r\n            <Temperature temp={weather.current.temp} units={units} />\r\n          </p>\r\n\r\n          <p>\r\n            Feels like:{\" \"}\r\n            <Temperature temp={weather.current.feels_like} units={units} />\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\n/**\r\n * Formatted date\r\n */\r\nexport default function DateString(props) {\r\n\t\r\n\tconst { time } = props;\r\n\r\n\t// console.log(time);\r\n\r\n\r\n\tlet string = time;\r\n\tconst lastIndex = string.lastIndexOf(' ');\r\n\r\n\tstring = string.substring(0, lastIndex);\r\n\r\n\treturn <span>{string}</span>;\r\n}\r\n","import React from 'react'\r\n\r\nimport WeatherIcon from './WeatherIcon'\r\nimport Temperature from './Temperature'\r\nimport DateString from './DateString'\r\n\r\nimport '../styles/WeekForecast.css'\r\n\r\nexport default function WeekForecast(props) {\r\n\r\n\tconst { daily, units } = props;\r\n\r\n\treturn (\r\n\t\t<div className=\"forecast-week-container\">\r\n\t\t\t<h2>Weekly Forecast</h2>\r\n\r\n\t\t\t<div className=\"forecast-week\">\r\n\t\t\t\t{daily.map((day, index) => {\r\n\t\t\t\t\tif (index > 0) {\r\n\t\t\t\t\t\tconst time = new Date(day.dt * 1000); // in milliseconds so multiply by 1000 to get seconds\r\n\r\n\t\t\t\t\t\treturn (\r\n              <div className=\"forecast-day\">\r\n                <p className=\"forecast-date\">\r\n                  <DateString time={time.toDateString()} />\r\n                </p>\r\n\r\n                <WeatherIcon\r\n                  type={day.weather[0].icon}\r\n                  description={day.weather[0].description}\r\n                />\r\n\r\n                <p className=\"description\">{day.weather[0].description}</p>\r\n\r\n                <p>\r\n                  <Temperature temp={day.temp.max} units={''} /> / <Temperature temp={day.temp.min} units={units} />\r\n                </p>\r\n              </div>\r\n            );\r\n\t\t\t\t\t}\r\n\t\t\t\t})}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n","import React from 'react'\r\n\r\nexport default function HourString(props) {\r\n\t\r\n\tconst { time } = props;\r\n\r\n\tconst hours = time.getHours();\r\n\tlet string = hours % 12 ? (hours % 12).toString() : '12';\r\n\r\n\r\n\tif ( hours / 12 >= 1 ) {\r\n\t\tstring += 'pm'\r\n\t} else {\r\n\t\tstring += 'am'\r\n\t}\r\n\r\n\r\n\treturn <span>{string}</span>;\r\n}\r\n","import React from 'react'\r\n\r\nimport Temperature from './Temperature'\r\nimport HourString from './HourString'\r\nimport WeatherIcon from './WeatherIcon'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faChevronLeft, faChevronRight } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport '../styles/HourlyForecast.css'\r\n\r\nexport default function HourlyForecast(props) {\r\n\tconst { hourly, units, page, scroll } = props;\r\n\r\n\t// let minHour = 0;\r\n\t// let maxHour = 12;\r\n\r\n\t// const scrollRight = () => {\r\n\t// \tconsole.log('scroll right');\r\n\t// \tminHour = 12;\r\n\t// \tmaxHour = 24;\r\n\t// }\r\n\r\n\tconsole.log(page);\r\n\r\n\treturn (\r\n    <div className=\"forecast-hourly-container\">\r\n      <h2>Hourly Forecast</h2>\r\n      <div className=\"forecast-hourly\">\r\n        <button className={page === 0 ? 'disabled' : ''} onClick={() => scroll(page - 1)} aria-label=\"Scroll Left\">\r\n          <FontAwesomeIcon icon={faChevronLeft} />\r\n        </button>\r\n        {hourly.map((hour, index) => {\r\n          const time = new Date(hour.dt * 1000); // in milliseconds so multiply by 1000 to get seconds\r\n\r\n          if (index >= page * 12 && index < (page + 1) * 12) {\r\n            //only 12 hours\r\n            return (\r\n              <div className=\"forecast-hour\">\r\n                <p>\r\n                  <HourString time={time} />\r\n                </p>\r\n\r\n                <p>\r\n                  <Temperature temp={hour.temp} units={units} />\r\n                </p>\r\n\r\n                <WeatherIcon\r\n                  type={hour.weather[0].icon}\r\n                  description={hour.weather[0].description}\r\n                />\r\n              </div>\r\n            );\r\n          }\r\n        })}\r\n\r\n        <button className={page === 1 ? 'disabled' : ''} onClick={() => scroll(page + 1)} aria-label=\"Scroll Right\">\r\n          <FontAwesomeIcon icon={faChevronRight} />\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrashAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport Location from './Location'\r\n\r\nimport '../styles/LocationList.css'\r\n\r\nexport default function LocationList(props) {\r\n\t\r\n\tconst { locations, onSelect, onRemove, city, state, country} = props;\r\n\t\r\n\t// /**\r\n\t//  * Return true if this is the selected location\r\n\t//  */\r\n\tconst selectedLocation = (loc) => {\r\n\t\treturn loc.data.city === city && loc.data.state === state && loc.data.country === country ? true : false;\r\n\t}\r\n\r\n\r\n\treturn (\r\n\t\t<div className=\"LocationList\">\r\n\t\t\t<h3>Saved Locations</h3>\r\n\t\t\t\r\n\t\t\t<ul>\r\n\t\t\t\t{!locations.length ? \r\n\t\t\t\t<li><p>No locations in list</p></li> :\r\n\t\t\t\t\r\n\t\t\t\tlocations.map( loc => {\r\n\t\t\t\t\tconst { city, state, country } = loc.data;\r\n\r\n\t\t\t\t\treturn (\r\n            <div className={`LocationList-loc ${selectedLocation(loc) ? 'selected' : ''}`}>\r\n              <li key={loc.key}>\r\n                <button className=\"LocationList-select\" onClick={() => onSelect(loc.data)}>\r\n                  <Location city={city} province={state} country={country} />\r\n                </button>\r\n              </li>\r\n\r\n              <button\r\n                onClick={() => onRemove(loc.key)}\r\n                className=\"LocationList-remove\"\r\n                aria-label=\"Remove\"\r\n                title=\"Remove\"\r\n              >\r\n                <FontAwesomeIcon icon={faTrashAlt} />\r\n              </button>\r\n            </div>\r\n          );\r\n\t\t\t\t})}\r\n\t\t\t</ul>\r\n\r\n\t\t</div>\r\n\t)\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nimport '../styles/Footer.css'\r\n\r\nexport default class Footer extends Component {\r\n\trender() {\r\n\t\treturn (\r\n      <footer>\r\n        <div className=\"wrapper\">\r\n          <div className=\"footer-container\">\r\n            <p>\r\n              Made at <a href=\"https://junocollege.com/\" rel=\"noreferrer\">Juno College</a> by{\" \"}\r\n              <a href=\"https://github.com/nkanigsberg\" rel=\"noreferrer\">Nathan Kanigsberg</a>\r\n            </p>\r\n            <p>© Copyright 2020</p>\r\n          </div>\r\n        </div>\r\n      </footer>\r\n    );\r\n\t}\r\n}\r\n","// import { ImageOverlay } from 'leaflet';\r\nimport React, { Component } from 'react'\r\n\r\nimport { render } from \"react-dom\";\r\nimport { Map, TileLayer, LayersControl } from \"react-leaflet\";\r\n\r\nimport '../styles/MapComponent.css'\r\n\r\n// import Search from 'react-leaflet-search';\r\n\r\nexport default function MapComponent(props) {\r\n\r\n\tconst { lat, lon, mapType, onChange } = props;\r\n\tlet zoom = 5;\r\n\r\n\tconst position = [lat, lon];\r\n\r\n\t/**\r\n\t * Pass the value to parent component\r\n\t */\r\n\tconst passValue = e => {\r\n\t\t// console.log(e.target.value);\r\n\t\tonChange(e.target.value);\r\n\t}\r\n\r\n\r\n\r\n\treturn (\r\n    <div className=\"MapComponent\">\r\n\t\t\t\r\n      {/* map layer control */}\r\n      <form onChange={passValue} className=\"mapLayer\" action=\"#\">\r\n        <div className=\"mapLayer-control\">\r\n          <input\r\n            type=\"radio\"\r\n            name=\"mapLayerControl\"\r\n            id=\"clouds_new\"\r\n            value=\"clouds_new\"\r\n            checked={mapType === \"clouds_new\" ? true : false}\r\n          />\r\n          <label htmlFor=\"clouds_new\">Clouds</label>\r\n        </div>\r\n        <div className=\"mapLayer-control\">\r\n          <input\r\n            type=\"radio\"\r\n            name=\"mapLayerControl\"\r\n            id=\"precipitation_new\"\r\n            value=\"precipitation_new\"\r\n            checked={mapType === \"precipitation_new\" ? true : false}\r\n          />\r\n          <label htmlFor=\"precipitation_new\">Precipitation</label>\r\n        </div>\r\n        <div className=\"mapLayer-control\">\r\n          <input\r\n            type=\"radio\"\r\n            name=\"mapLayerControl\"\r\n            id=\"temp_new\"\r\n            value=\"temp_new\"\r\n            checked={mapType === \"temp_new\" ? true : false}\r\n          />\r\n          <label htmlFor=\"temp_new\">Temperature</label>\r\n        </div>\r\n      </form>\r\n\r\n      <Map center={position} zoom={zoom}>\r\n        {/* <TileLayer\r\n\t\t\t\t\t\t\tattribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n\t\t\t\t\t\t\turl=\"https://{s}.tile.osm.org/{z}/{x}/{y}.png\"\r\n\t\t\t\t\t\t/> */}\r\n        <TileLayer\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n          url=\"https://{s}.tile.osm.org/{z}/{x}/{y}.png\"\r\n        />\r\n\r\n        <TileLayer\r\n          url={`https://tile.openweathermap.org/map/${mapType}/{z}/{x}/{y}.png?appid=4de58afe7c0aa78a01498b122c46d7e2`}\r\n          /* bounds={[[lat - 10, lon - 10], [lat + 10, lon + 10]]} */\r\n          /* zIndex={2} */\r\n        />\r\n\r\n        {/* <Marker position={position}>\r\n\t\t\t\t\t\t\t<Popup>\r\n\t\t\t\t\t\t\t\tA pretty CSS3 popup. <br /> Easily customizable.\r\n\t\t\t\t\t\t\t</Popup>\r\n\t\t\t\t\t\t</Marker> */}\r\n      </Map>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from 'react';\nimport firebase from './firebase';\n\nimport './styles/fonts.css';\nimport './styles/App.css';\nimport './styles/media1280.css';\nimport './styles/media768.css';\n\n// import axios from \"axios\";\n\nimport openWeather from './API/openWeather';\nimport { reverseGeo, forwardGeo } from './API/locationIq';\n// import ipdata from './API/ipdata';\n\nimport WeatherIcon from './Components/WeatherIcon';\n// import SearchBar from './Components/SearchBar';\n\nimport Header from './Components/Header';\nimport CurrentWeather from './Components/CurrentWeather';\nimport WeekForecast from './Components/WeekForecast';\nimport HourlyForecast from './Components/HourlyForecast';\nimport LocationList from './Components/LocationList'\nimport Footer from './Components/Footer';\n\nimport MapComponent from './Components/MapComponent';\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      lat: 43.6534,\n      lon: -79.3839,\n      location: \"\",\n      weather: {},\n      city: \"\",\n      province: \"\",\n      country: \"\",\n      isLoading: false,\n      weatherLoading: true,\n      locationLoading: true,\n      firebaseLoading: true,\n      units: \"metric\",\n\t\t\tlocationList: [],\n\t\t\tmapType: \"clouds_new\",\n\t\t\tuid: '',\n\t\t\thourlyPage: 0,\n    };\n  }\n\n  componentDidMount() {\n\t\tthis.getLocation();\n\n\t\tconst dbRef = firebase.database().ref();\n\n\t\tdbRef.on('value', response => {\n\t\t\tconst newState = [];\n\t\t\tconst data = response.val();\n\t\t\t\n\t\t\t// if there is data\n\t\t\tif (data) {\n\t\t\t\tconst user = data.users[this.state.uid];\n\n\t\t\t\t// console.log(data);\n\n\t\t\t\tfor (let key in user) {\n\t\t\t\t\tnewState.push({key: key, data: user[key]});\n\t\t\t\t}\n\n\t\t\t\t// console.log(newState);\n\t\t\t\tthis.setState({\n\t\t\t\t\tlocationList: newState,\n\t\t\t\t\tfirebaseLoading: false,\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\tthis.setState({\n          locationList: [],\n          firebaseLoading: false,\n        });\n\t\t\t}\n\t\t})\n\n\n\t\t// firebase anonymous account auth\n\t\tfirebase\n\t\t\t.auth()\n\t\t\t.signInAnonymously()\n\t\t\t.catch(function (error) {\n\t\t\t\t// Handle Errors here.\n\t\t\t\tconsole.log(error.code);\n\t\t\t\tconsole.log(error.message);\n\t\t\t\n\t\t\t});\n\n\t\t\tfirebase.auth().onAuthStateChanged( (user) => {\n        if (user) {\n          // User is signed in.\n          const isAnonymous = user.isAnonymous;\n\t\t\t\t\tconst uid = user.uid;\n\t\t\t\t\tconsole.log(uid);\n\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tuid: uid,\n\t\t\t\t\t})\n          // ...\n        } else {\n\t\t\t\t\t// User is signed out.\n\t\t\t\t\tconsole.log('signed out');\n          // ...\n        }\n        // ...\n      });\n\n  }\n\n  // get location data for user's device\n  getLocation = (e = null) => {\n\t\tif (e) e.preventDefault();\n\n    if (\"geolocation\" in navigator) {\n      navigator.geolocation.getCurrentPosition((position) => {\n        // console.log(position);\n\n\t\t\t\tthis.setState({\n          lat: position.coords.latitude,\n          lon: position.coords.longitude,\n        });\n\n\t\t\t\tconst {lat, lon, units} = this.state;\n\n\t\t\t\tthis.getCity(lat, lon);\n\t\t\t\tthis.getWeather(lat, lon, units);\n\n      });\n    } else {\n      console.log(\"No geolocation\");\n    }\n  }\n\n  // get city name from locationIQ API\n  getCity(lat, lon) {\n\t\t// const dbRef = firebase.database().ref();\n\t\t\n\t\tthis.setState({\n\t\t\tisLoading: true,\n\t\t})\n\n\t\treverseGeo(lat, lon).then(result => {\n\t\t\t\n\t\t\tconst { city, state, country } = result.data.address;\n\t\t\t\n\t\t\t// let allowPush = false;\n\n\t\t\t// console.log(result.data.address);\n      this.setState(\n        {\n          city: city,\n          province: state,\n          country: country,\n          locationLoading: false,\n        },\n        this.updateList\n      );\t\n\t\t\t\n\t\t\t// console.log(this.state.locationList);\n\n\t\t\t// for (let loc in this.state.locationList) {\n      //   const list = this.state.locationList;\n      //   console.log(this.state.locationList[loc]);\n      //   // console.log(loc.data.city, loc.data.state, loc.data.country);\n      //   // console.log(city, state, country);\n\n      //   if (\n      //     list[loc].data.city !== city &&\n      //     list[loc].data.state !== state &&\n      //     list[loc].data.country !== country\n      //   ) {\n      //     // if not in list, push city to firebase\n      //     dbRef.push({\n      //       city: city,\n      //       state: state,\n      //       country: country,\n      //       lat: lat,\n      //       lon: lon,\n      //     });\n      //   }\n      // }\n\n\n\n\t\t})\n\t\t\n\t}\n\n\t/**\n\t * Update the location list from state\n\t */\n\tupdateList() {\n\t\tconsole.log(this.state.firebaseLoading);\n\t\tif (!this.state.firebaseLoading) {\n      const dbRef = firebase.database().ref();\n\t\t\tlet canPush = true;\n\t\t\t\n      // console.log(this.state.locationList);\n\n      // check to see if location is already in list\n      for (let loc in this.state.locationList) {\n        const list = this.state.locationList;\n        // console.log(this.state.locationList[loc]);\n        // console.log(loc.data.city, loc.data.state, loc.data.country);\n        // console.log(city, state, country);\n        // console.log(list[loc]);\n        // console.log(\n        // \tlist[loc].data.city, this.state.city,\n        // \t\tlist[loc].data.state, this.state.province,\n        // \t\tlist[loc].data.country, this.state.country\n        // );\n\n        if (\n          list[loc].data.city === this.state.city &&\n          list[loc].data.state === this.state.province &&\n          list[loc].data.country === this.state.country\n        ) {\n          canPush = false;\n        }\n      }\n\n      // if not in list, push city to firebase\n      if (canPush && this.state.locationList.length < 6) {\n\t\t\t\tconsole.log('pushing');\n        dbRef.child('users').child(this.state.uid).push({\n          city: this.state.city ? this.state.city : '',\n          state: this.state.province ? this.state.province : '',\n          country: this.state.country,\n          lat: this.state.lat,\n          lon: this.state.lon,\n        });\n      }\n    }\n\t}\n\n\t\n\t// get weather from openWeather API\n  getWeather(lat, lon, units) {\n\n\t\topenWeather(lat, lon, units).then(result => {\n      // console.log(result.data);\n      // return result.data;\n     \tthis.setState({\n\t\t\t\t weather: result.data,\n\t\t\t\t weatherLoading: false,\n\t\t\t\t units: units,\n\t\t\t});\n    });\n\t}\n\n\t/**\n\t * Search for coordinates from input location\n\t * @param {event} e \n\t */\n\tsearchLocation = e => {\n\t\te.preventDefault();\n\t\tconsole.log(\"location search\");\n\n\t\tif (this.state.location) {\n      forwardGeo(this.state.location).then((result) => {\n        const location = result.data[0];\n\t\t\t\t// console.log(location);\n\t\t\t\t\n\t\t\t\tthis.setState({\n\t\t\t\t\tlat: location.lat,\n\t\t\t\t\tlon: location.lon,\n        });\n\n\t\t\t\tconst { lat, lon, units} = this.state;\n\n\t\t\t\tthis.getCity(lat, lon);\n\t\t\t\tthis.getWeather(lat, lon, units);\n\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Update the location state on change of input\n\t */\n\tupdateLocationState = e => {\n\t\tthis.setState({\n      location: e.target.value,\n    });\n\t}\n\n\n\t// updateUnits = e => {\n\t// \t// console.log(e.target.value);\n\t// \tthis.setState({\n\t// \t\tunits: e.target.value,\n\t// \t}, () => { //callback function to guarantee execute AFTER state change\n\t// \t\tconst { lat, lon, units } = this.state;\n\t// \t\t// console.log(units);\n\n\t// \t\tthis.getWeather(lat, lon, units);\n\t// \t})\n\t// }\n\n\tupdateUnits = e => {\n\t\tconst { lat, lon, units } = this.state;\n\t\t\t// console.log(units);\n\t\t\t// units: e.target.value,\n\t\tthis.getWeather(lat, lon, e.target.value);\n\t}\n\t\n\n\t/**\n\t * Change location on selection from list\n\t * @param {*} data \n\t */\n\tselectLocation = (data) => {\n\t\tthis.getWeather(data.lat, data.lon, this.state.units);\n\n\t\tthis.setState({\n\t\t\tlat: data.lat,\n\t\t\tlon: data.lon,\n\t\t\tcity: data.city,\n\t\t\tprovince: data.state,\n\t\t\tcountry: data.country,\n\t\t\tlocationLoading: false,\n\t\t})\n\t}\n\n\t/**\n\t * Remove location from list\n\t * @param {*} key \n\t */\n\tremoveLocation = (key) => {\n\t\tconst dbRef = firebase.database().ref();\n\t\tconsole.log('remove', key);\n\n\t\tdbRef.child('users').child(this.state.uid).child(key).remove();\n\t}\n\n\n\tupdateMapType = value => {\n\t\t// console.log('change', value);\n\t\tthis.setState({\n\t\t\tmapType: value,\n\t\t})\n\t}\n\n\thourlyScroll = page => {\n\t\t\n\t\tif (page >=0 && page <= 1) {\n\t\t\tthis.setState({\n\t\t\thourlyPage: page,\n\t\t})}\n\t}\n\n\n\n  render() {\n    // console.log('render');\n    const {\n      weather,\n      weatherLoading,\n\t\t\tlocationLoading,\n\t\t\tisLoading,\n      city,\n      province,\n      country,\n\t\t\tunits,\n\t\t\tlat,\n\t\t\tlon,\n\t\t\tmapType,\n\t\t\thourlyPage,\n    } = this.state;\n\n\t\tconsole.log('units', units);\n    return (\n      <div className=\"App\">\n        <Header\n          getLocation={this.getLocation}\n          submit={this.searchLocation}\n          change={this.updateLocationState}\n\t\t\t\t\tupdateUnits={this.updateUnits}\n\t\t\t\t\tunits={units}\n        />\n\n        <main>\n          <div className=\"wrapper\">\n            <div class=\"main-container\">\n              <div class=\"main-left\">\n                {/* display main content only after loaded from API */}\n                {weatherLoading || locationLoading ? (\n                  <p>{isLoading ? \"Loading...\" : \"\"}</p>\n                ) : (\n                  <>\n\t\t\t\t\t\t\t\t\t\t<CurrentWeather\n\t\t\t\t\t\t\t\t\t\t\tcity={city}\n\t\t\t\t\t\t\t\t\t\t\tprovince={province}\n\t\t\t\t\t\t\t\t\t\t\tcountry={country}\n\t\t\t\t\t\t\t\t\t\t\tweather={weather}\n\t\t\t\t\t\t\t\t\t\t\tunits={units}\n\t\t\t\t\t\t\t\t\t\t/>\n\n                    <WeekForecast daily={weather.daily} units={units} />\n\n                    <HourlyForecast hourly={weather.hourly} units={units} page={hourlyPage} scroll={this.hourlyScroll} />\n                  </>\n                )}\n              </div>\n\n              <div className=\"main-right\">\n                <LocationList\n                  onSelect={this.selectLocation}\n                  onRemove={this.removeLocation}\n\t\t\t\t\t\t\t\t\tlocations={this.state.locationList}\n\t\t\t\t\t\t\t\t\tcity={city}\n\t\t\t\t\t\t\t\t\tstate={province}\n\t\t\t\t\t\t\t\t\tcountry={country}\n                />\n\n\t\t\t\t\t\t\t\t<MapComponent\n\t\t\t\t\t\t\t\t\tlat={lat}\n\t\t\t\t\t\t\t\t\tlon={lon}\n\t\t\t\t\t\t\t\t\tmapType={mapType}\n\t\t\t\t\t\t\t\t\tonChange={this.updateMapType}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\n              </div>\n            </div>\n          </div>\n        </main>\n\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;","// LocationIQ API - locationiq.com\r\n\r\nimport axios from 'axios'\r\n\r\nconst endpoint = \"https://us1.locationiq.com/v1/\";\r\nconst key = \"a2f6bb0bb601e5\";\r\n\r\n\r\n/**\r\n * Reverse Geocoding - get location data from coordinates\r\n * @param {number} latitude\r\n * @param {number} longitude\r\n * @returns {object} axiosPromise\r\n */\r\nexport function reverseGeo(latitude, longitude) {\r\n\treturn axios({\r\n    method: \"GET\",\r\n    url: endpoint + \"reverse.php\",\r\n    dataResponse: \"json\",\r\n    params: {\r\n      format: \"json\",\r\n      key: key,\r\n      lat: latitude,\r\n\t\t\tlon: longitude,\r\n    },\r\n  });\r\n}\r\n\r\n\r\n/**\r\n * Forward Geocoding - get coordinates from location name\r\n * @param {string} location The location to get coordinates for\r\n * @returns {object} axiosPromise\r\n */\r\nexport function forwardGeo(location) {\r\n  return axios({\r\n    method: \"GET\",\r\n    url: endpoint + \"search.php\",\r\n    dataResponse: \"json\",\r\n    params: {\r\n      format: \"json\",\r\n      key: key,\r\n      q: location,\r\n    },\r\n  });\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["Components/WeatherIcon.js","API/openWeather.js","Components/SearchBar.js","Components/Units.js","Components/Header.js","Components/Temperature.js","Components/CurrentWeather.js","Components/WeekForecast.js","Components/Footer.js","App.js","API/locationIq.js","serviceWorker.js","index.js"],"names":["Icon","props","className","src","type","alt","description","SearchBar","action","htmlFor","id","onChange","change","placeholder","onClick","submit","icon","faSearchLocation","getLocation","faMapMarkerAlt","Units","updateUnits","value","this","Component","Header","console","log","Temperature","temp","units","toFixed","CurrentWeather","city","province","country","weather","current","feels_like","WeekForecast","daily","map","day","index","time","Date","dt","toDateString","max","Footer","App","e","preventDefault","navigator","geolocation","getCurrentPosition","position","setState","lat","coords","latitude","lon","longitude","state","getCity","getWeather","searchLocation","location","axios","method","url","endpoint","dataResponse","params","format","key","q","then","result","data","updateLocationState","target","weatherLoading","locationLoading","address","appid","openWeather","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4554ec64.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport { weatherIconEndpoint } from '../API/openWeather'\r\n\r\nimport '../styles/WeatherIcon.css'\r\n\r\nexport default function Icon(props) {\r\n\treturn (\r\n\t\t<img className=\"weather-icon\" src={`${weatherIconEndpoint}${props.type}@2x.png`} alt={props.description}/>\r\n\t)\r\n}\r\n","// OpenWeather API - openweathermap.org\r\n\r\nimport axios from 'axios'\r\n\r\nconst endpoint = 'https://api.openweathermap.org/data/2.5/onecall';\r\nconst key = '4de58afe7c0aa78a01498b122c46d7e2';\r\n\r\nexport const weatherIconEndpoint = 'http://openweathermap.org/img/wn/';\r\n\r\n\r\nexport default function openWeather(latitude, longitude, units) {\r\n\treturn axios({\r\n\t\tmethod: \"GET\",\r\n\t\turl: endpoint,\r\n\t\tdataResponse: \"json\",\r\n\t\tparams: {\r\n\t\t\tappid: key,\r\n\t\t\tunits: units,\r\n\t\t\tlat: latitude,\r\n\t\t\tlon: longitude,\r\n\t\t}\r\n\t})\r\n}","import React from 'react'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSearchLocation, faMapMarkerAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n/**\r\n * The search bar for looking up new locations\r\n * @param {object} props \r\n */\r\nexport default function SearchBar(props) {\r\n\r\n\treturn (\r\n    <form action=\"submit\" className=\"searchBar\">\r\n      <label htmlFor={props.id}>Search Location </label>\r\n      <input\r\n        onChange={props.change}\r\n        type=\"text\"\r\n        id={props.id}\r\n        placeholder={props.placeholder}\r\n      />\r\n\r\n      <button onClick={props.submit} type=\"submit\">\r\n        <FontAwesomeIcon icon={faSearchLocation} />\r\n      </button>\r\n\r\n      <button onClick={props.getLocation}>\r\n        <FontAwesomeIcon icon={faMapMarkerAlt} />\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\n","import React, { Component } from 'react'\r\n\r\n/**\r\n * Select which units of measurement to use\r\n */\r\nexport default class Units extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper();\r\n\t\tthis.updateUnits = props.updateUnits;\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<button value=\"metric\" onClick={this.updateUnits}>metric</button> / \r\n\t\t\t\t<button value=\"imperial\" onClick={this.updateUnits}>imperial</button> / \r\n\t\t\t\t<button value=\"kelvin\" onClick={this.updateUnits}>kelvin</button>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nimport SearchBar from './SearchBar'\r\nimport Units from './Units'\r\n\r\nimport '../styles/Header.css'\r\n\r\n// import App from '../App';\r\n\r\nexport default class Header extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper();\r\n\t\tthis.getLocation = props.getLocation;\r\n\t\tthis.submit = props.submit;\r\n\t\tthis.change = props.change;\r\n\t\tthis.updateUnits = props.updateUnits;\r\n\r\n\t\t// console.log(props);\r\n\t\t// console.log(this.change);\r\n\r\n\t\tconsole.log(this.updateUnits);\r\n\t}\r\n\t\r\n\trender() {\r\n\t\treturn (\r\n      <header>\r\n        <div className=\"wrapper\">\r\n\t\t\t\t\t<div className=\"header-container\">\r\n\t\t\t\t\t\t<h1>Weather App</h1>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t<div className=\"right\">\r\n\t\t\t\t\t\t\t<Units updateUnits={this.updateUnits} />\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t<SearchBar\r\n\t\t\t\t\t\t\t\tgetLocation={this.getLocation}\r\n\t\t\t\t\t\t\t\tsubmit={this.submit}\r\n\t\t\t\t\t\t\t\tchange={this.change}\r\n\t\t\t\t\t\t\t\tid=\"search-location\"\r\n\t\t\t\t\t\t\t\tplaceholder=\"Enter Location\"\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n      </header>\r\n    );\r\n\t}\r\n}\r\n","import React from 'react'\r\n\r\n/**\r\n * Display temperature with provided unit\r\n */\r\nexport default function Temperature(props) {\r\n\r\n\tconst { temp, units } = props;\r\n\r\n\treturn (\r\n    <span>\r\n      {temp.toFixed(1)}\r\n      {units === \"metric\" ? \"°C\" : units === \"imperial\" ? \"°F\" : \"K\"}\r\n    </span>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nimport WeatherIcon from './WeatherIcon';\r\nimport Temperature from './Temperature';\r\n\r\nimport '../styles/CurrentWeather.css';\r\n\r\n/**\r\n * The current weather\r\n */\r\nexport default function CurrentWeather(props) {\r\n\r\n\tconst {city, province, country, weather, units } = props;\r\n\r\n\treturn (\r\n    <div className=\"currentWeather-container\">\r\n      <h2>{`${city ? `${city}, ` : \"\"}${province}, ${country}`}</h2>\r\n      <p>{weather.current.weather[0].description}</p>\r\n      <div className=\"currentWeather\">\r\n        <h3>\r\n          <Temperature temp={weather.current.temp} units={units} />\r\n        </h3>\r\n\r\n        <WeatherIcon\r\n          type={weather.current.weather[0].icon}\r\n          description={weather.current.weather[0].description}\r\n        />\r\n\r\n        <p>\r\n          Feels like:{\" \"}\r\n          <Temperature temp={weather.current.feels_like} units={units} />\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nimport WeatherIcon from './WeatherIcon'\r\nimport Temperature from './Temperature'\r\n// import Date from './Date'\r\n\r\nimport '../styles/WeekForecast.css'\r\n\r\nexport default function WeekForecast(props) {\r\n\r\n\tconst { weather, units } = props;\r\n\r\n\treturn (\r\n\t\t<div className=\"forecast\">\r\n\t\t\t<h2>Weekly Forecast</h2>\r\n\r\n\t\t\t<div className=\"forecast-week\">\r\n\t\t\t\t{weather.daily.map((day, index) => {\r\n\t\t\t\t\tif (index > 0) {\r\n\t\t\t\t\t\tconst time = new Date(day.dt * 1000); // in milliseconds so multiply by 1000 to get seconds\r\n\r\n\t\t\t\t\t\tconsole.log(time.toDateString());\r\n\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<div className=\"forecast-day\">\r\n                {/* <p><Date time={time.toDateString()} /></p> */}\r\n                <p>\r\n                  <Temperature temp={day.temp.max} units={units} />\r\n                </p>\r\n\r\n                <WeatherIcon\r\n                  type={day.weather[0].icon}\r\n                  description={day.weather[0].description}\r\n                />\r\n              </div>\r\n            );\r\n\t\t\t\t\t}\r\n\t\t\t\t})}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nimport '../styles/Footer.css'\r\n\r\nexport default class Footer extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<footer>\r\n\t\t\t\t<div className=\"wrapper\">\r\n\t\t\t\t\t<div className=\"footer-container\">\r\n\t\t\t\t\t\t<p>Made at Juno College</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</footer>\r\n\t\t)\r\n\t}\r\n}\r\n","import React, { Component } from 'react';\nimport './styles/fonts.css';\nimport './styles/App.css';\n\n\n// import axios from \"axios\";\n\nimport openWeather from './API/openWeather';\nimport { reverseGeo, forwardGeo } from './API/locationIq';\n\nimport WeatherIcon from './Components/WeatherIcon';\n// import SearchBar from './Components/SearchBar';\n\nimport Header from './Components/Header';\nimport CurrentWeather from './Components/CurrentWeather';\nimport WeekForecast from './Components/WeekForecast';\nimport Footer from './Components/Footer';\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n\t\t\tlat: 0,\n\t\t\tlon: 0,\n\t\t\tlocation: '',\n      weather: {},\n\t\t\tcity: \"\",\n\t\t\tprovince: \"\",\n\t\t\tcountry: \"\",\n\t\t\tweatherLoading: true,\n\t\t\tlocationLoading: true,\n\t\t\tunits: \"metric\",\n\t\t};\n  }\n\n  componentDidMount() {\n\t\tthis.getLocation();\n  }\n\n  // get location data for user's device\n  getLocation = (e = null) => {\n\t\tif (e) e.preventDefault();\n\n    if (\"geolocation\" in navigator) {\n      navigator.geolocation.getCurrentPosition((position) => {\n        // console.log(position);\n\n\t\t\t\tthis.setState({\n          lat: position.coords.latitude,\n          lon: position.coords.longitude,\n        });\n\n\t\t\t\tconst {lat, lon, units} = this.state;\n\n\t\t\t\tthis.getCity(lat, lon);\n\t\t\t\tthis.getWeather(lat, lon, units);\n\n      });\n    } else {\n      console.log(\"No geolocation\");\n    }\n  }\n\n  // get city name from locationIQ API\n  getCity(lat, lon) {\n\t\treverseGeo(lat, lon).then(result => {\n\t\t\t// console.log(result.data.address);\n      this.setState({\n\t\t\t\tcity: result.data.address.city,\n\t\t\t\tprovince: result.data.address.state,\n\t\t\t\tcountry: result.data.address.country,\n\t\t\t\tlocationLoading: false,\n      });\n    });\n  }\n\n\t// get weather from openWeather API\n  getWeather(lat, lon, units) {\n\n\t\topenWeather(lat, lon, units).then(result => {\n      // console.log(result.data);\n      // return result.data;\n     \tthis.setState({\n\t\t\t\t weather: result.data,\n\t\t\t\t weatherLoading: false,\n\t\t\t\t units: units,\n\t\t\t});\n    });\n\t}\n\n\t/**\n\t * Search for coordinates from input location\n\t * @param {event} e \n\t */\n\tsearchLocation = e => {\n\t\te.preventDefault();\n\t\tconsole.log(\"location search\");\n\n\t\tif (this.state.location) {\n      forwardGeo(this.state.location).then((result) => {\n        const location = result.data[0];\n\t\t\t\t// console.log(location);\n\t\t\t\t\n\t\t\t\tthis.setState({\n\t\t\t\t\tlat: location.lat,\n\t\t\t\t\tlon: location.lon,\n        });\n\n\t\t\t\tconst { lat, lon, units} = this.state;\n\n\t\t\t\tthis.getCity(lat, lon);\n\t\t\t\tthis.getWeather(lat, lon, units);\n\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Update the location state on change of input\n\t */\n\tupdateLocationState = e => {\n\t\tthis.setState({\n      location: e.target.value,\n    });\n\t}\n\n\n\t// updateUnits = e => {\n\t// \t// console.log(e.target.value);\n\t// \tthis.setState({\n\t// \t\tunits: e.target.value,\n\t// \t}, () => { //callback function to guarantee execute AFTER state change\n\t// \t\tconst { lat, lon, units } = this.state;\n\t// \t\t// console.log(units);\n\n\t// \t\tthis.getWeather(lat, lon, units);\n\t// \t})\n\t// }\n\n\tupdateUnits = e => {\n\t\tconst { lat, lon, units } = this.state;\n\t\t\t// console.log(units);\n\t\t\t// units: e.target.value,\n\t\tthis.getWeather(lat, lon, e.target.value);\n\t}\n\t\n\n\n  render() {\n\t\t// console.log('render');\n\t\tconst { weather, weatherLoading, locationLoading, city, province, country, units } = this.state;\n\n    return (\n      <div className=\"App\">\n\n\t\t\t\t<Header\n          getLocation={this.getLocation}\n          submit={this.searchLocation}\n          change={this.updateLocationState}\n          updateUnits={this.updateUnits}\n        />\n\n        <main>\n          <div className=\"wrapper\">\n\t\t\t\t\t\t{/* display main content only after loaded from API */}\n\t\t\t\t\t\t{weatherLoading || locationLoading ? (\n\t\t\t\t\t\t\t<p>Loading...</p>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<>\n\n\t\t\t\t\t\t\t\t<CurrentWeather\n\t\t\t\t\t\t\t\t\tcity={city}\n\t\t\t\t\t\t\t\t\tprovince={province}\n\t\t\t\t\t\t\t\t\tcountry={country}\n\t\t\t\t\t\t\t\t\tweather={weather}\n\t\t\t\t\t\t\t\t\tunits={units}\n\t\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t\t<WeekForecast \n\t\t\t\t\t\t\t\t\tweather={weather}\n\t\t\t\t\t\t\t\t\tunits={units}\n\t\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n        </main>\n\n\t\t\t\t<Footer />\n\n      </div>\n    );\n  }\n}\n\nexport default App;","// LocationIQ API - locationiq.com\r\n\r\nimport axios from 'axios'\r\n\r\nconst endpoint = \"https://us1.locationiq.com/v1/\";\r\nconst key = \"a2f6bb0bb601e5\";\r\n\r\n\r\n/**\r\n * Reverse Geocoding - get location data from coordinates\r\n * @param {number} latitude\r\n * @param {number} longitude\r\n * @returns {object} axiosPromise\r\n */\r\nexport function reverseGeo(latitude, longitude) {\r\n\treturn axios({\r\n    method: \"GET\",\r\n    url: endpoint + \"reverse.php\",\r\n    dataResponse: \"json\",\r\n    params: {\r\n      format: \"json\",\r\n      key: key,\r\n      lat: latitude,\r\n\t\t\tlon: longitude,\r\n    },\r\n  });\r\n}\r\n\r\n\r\n/**\r\n * Forward Geocoding - get coordinates from location name\r\n * @param {string} location The location to get coordinates for\r\n * @returns {object} axiosPromise\r\n */\r\nexport function forwardGeo(location) {\r\n  return axios({\r\n    method: \"GET\",\r\n    url: endpoint + \"search.php\",\r\n    dataResponse: \"json\",\r\n    params: {\r\n      format: \"json\",\r\n      key: key,\r\n      q: location,\r\n    },\r\n  });\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}